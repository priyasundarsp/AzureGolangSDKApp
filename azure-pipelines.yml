# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'azdevconfacr-service-connection'
  # imageRepository: 'priyasundarspazuregolangsdkapp'
  imageRepositoryBE: 'priyasundarspazuregolangsdkapp/server'
  imageRepositoryFE: 'priyasundarspazuregolangsdkapp/webui'
  containerRegistry: 'azconfdemoacr.azurecr.io'
  dockerfilePathGoApp: 'server/Dockerfile'
  dockerfilePathPreactApp: 'webui/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'azconfdemoacr9302f921-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build
  jobs:
  - job: BuildGoApp
    displayName: Build Golang App
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: '$(imageRepositoryBE)'
        command: 'buildAndPush'
        Dockerfile: '$(dockerfilePathGoApp)'
        tags: '$(tag)'

    - upload: manifests
      artifact: manifests

  - job: BuildPreactApp
    displayName: Build Preact App
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepositoryFE)
        dockerfile: $(dockerfilePathPreactApp)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests



- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'azuregolangsdkaks-env.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Kubernetes@1
            displayName: Deploy with K8s CLI
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'priyasundarspFirstGolangApp-1100-AZCONFDEMOAKS-firstgolangapp-1666175414162'
              namespace: 'default'
              command: 'apply'
              useConfigurationFile: true
              configurationType: 'inline'
              inline: |
                ---
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: azure-go-app
                spec:
                  selector:
                    matchLabels:
                      app: azure-go-app
                  replicas: 2
                  template:
                    metadata:
                      labels:
                        app: azure-go-app
                    spec:
                      containers:
                        - name: azure-go-app
                          image: "$(containerRegistry)/$(imageRepositoryBE):$(tag)"
                          envFrom:
                            - secretRef:
                                name: az-sp
                          env:
                            - name: "PORT"
                              value: "8000"
                          ports:
                            - name: go-app-port
                              containerPort: 8000
                ---
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: webui
                spec:
                  selector:
                    matchLabels:
                      app: azure-go-app
                  replicas: 2
                  template:
                    metadata:
                      labels:
                        app: azure-go-app
                    spec:
                      containers:
                        - name: webui
                          image: "$(containerRegistry)/$(imageRepositoryFE):$(tag)"
                          ports:
                            - name: web-port
                              containerPort: 80
                ---
                apiVersion: v1
                kind: Service
                metadata:
                  name: azure-go-app
                spec:
                  selector:
                    app: azure-go-app
                  ports:
                  - port: 8000
                    targetPort: go-app-port
                
                ---
                apiVersion: v1
                kind: Service
                metadata:
                  name: webui
                spec:
                  selector:
                    app: azure-go-app
                  ports:
                  - port: 8080
                    targetPort: web-port
                ---
                apiVersion: networking.k8s.io/v1
                kind: Ingress
                metadata:
                  name: aks-nginx-ig
                  labels:
                    name: az-app-ig
                  annotations:
                    kubernetes.io/ingress.class: addon-http-application-routing
                spec:
                  rules:
                  - http:
                      paths:
                        - pathType: Prefix
                          path: "/api"
                          backend:
                            service:
                              name: azure-go-app
                              port:
                                name: go-app-port
                        - pathType: Prefix
                          path: "/"
                          backend:
                            service:
                              name: webui
                              port:
                                name: web-port
              secretType: 'dockerRegistry'
              containerRegistryType: 'Container Registry'
              dockerRegistryEndpoint: 'azdevconfacr-service-connection'
              secretName: '$(imagePullSecret)'
              
            
          # - task: KubernetesManifest@0
          #   displayName: Create imagePullSecret
          #   inputs:
          #     action: 'createSecret'
          #     kubernetesServiceConnection: 'AZCONFDEMOAKS-azuregolankapp'
          #     secretType: 'dockerRegistry'
          #     secretName: '$(imagePullSecret)'
          #     dockerRegistryEndpoint: 'AZCONFDEMOACR'
          #     namespace: default

          # - task: KubernetesManifest@0
          #   displayName: Deploy to Kubernetes cluster
          #   inputs:
          #     action: deploy
          #     manifests: |
          #       $(Pipeline.Workspace)/manifests/deployment.yml
          #       $(Pipeline.Workspace)/manifests/service.yml
          #     imagePullSecrets: |
          #       $(imagePullSecret)
          #     containers: |
          #       $(containerRegistry)/$(imageRepositoryBE):$(tag)
          #       $(containerRegistry)/$(imageRepositoryFE):$(tag)

